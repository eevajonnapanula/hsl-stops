{"version":3,"sources":["components/styles.js","components/typography.js","components/time.js","components/stop.js","components/stops.js","components/input.js","App.js","serviceWorker.js","index.js"],"names":["changeColor","keyframes","_templateObject","ColumnDiv","styled","div","_templateObject2","_templateObject3","StyledInput","input","attrs","placeholder","_templateObject4","Header","_templateObject5","props","color","StopTimesWrapper","_templateObject6","Time","span","_templateObject7","AnimatedTime","_templateObject8","Headsign","_templateObject9","ColoredIcon","_templateObject10","Wrapper","_templateObject11","Stoptime","_templateObject12","StopWrapper","_templateObject13","substring","length","h1","typography_templateObject","H2","h2","typography_templateObject2","h3","typography_templateObject3","TimeWrapper","_ref","animated","time","react_default","a","createElement","mapping","FERRY","component","fa","RAIL","BUS","SUBWAY","TRAM","getTimeInMinutes","stoptime","moment","unix","serviceDay","realtimeArrival","diff","getFormattedTime","format","Stop","stop","vehicleMode","name","stoptimesWithoutPatterns","map","i","key","components_time","realtime","trip","routeShortName","headsign","Stops","queryString","react_apollo_browser_umd","query","gql","stops_templateObject","pollInterval","_ref2","loading","error","data","stops","components_stop","gtfsId","Input","onChange","e","handleChange","target","value","client","ApolloClient","uri","App","state","handleInputChange","changed","_this","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e9184ed.chunk.js","sourcesContent":["import styled, {keyframes} from 'styled-components'\n\nconst changeColor = keyframes`\n  0% {\n    color: rgb(255,255,255);\n  }\n\n  50% {\n    color: rgb(240,146,205);\n  }\n\n  100% {\n    color: rgb(255,255,255);\n  }\n`;\n\n\nexport const RowDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`\nexport const ColumnDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n\n`\n\nexport const StyledInput = styled.input.attrs({\n    placeholder: 'Search for a stop'\n  })`\n\n  border: 1px solid black;\n  padding: 1em;\n  border-radius: 0.5em;\n  margin: 0.5em;\n  min-width: 20em;\n`\n\nexport const Header = styled.div`\n  border-top-left-radius: 0.5em;\n  border-top-right-radius: 0.5em;\n  display: flex;\n  justify-content: flex-start;\n  padding-left: 1.5em;\n  background-color: ${props => props.color};\n`\n\nexport const StopTimesWrapper = styled.div`\n  border-radius: 0.5em;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 0.5em;\n  mergin-bottom: 1em;\n  color: white;\n`\nexport const Time = styled.span`\n  margin-right: 1em;\n  width: 1em;\n`\nexport const AnimatedTime = styled.span`\n  margin-right: 1em;\n  animation: ${changeColor} 10s linear infinite;\n`\nexport const Headsign = styled.span`\n\n`\n\nexport const ColoredIcon = styled.span`\n  color: ${props => props.color};\n  padding-right: 0.5em;\n`\nexport const Wrapper = styled.div`\n  width: 100%;\n  font-family: 'Roboto', sans-serif;\n  flex-direction: column;\n  display: flex;\n  align-items: center;\n`\n\nexport const Stoptime = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  margin-bottom: 0.25em;\n  margin-left: 0.5em;\n  margin-right: 0.5em;\n`\n\nexport const StopWrapper = styled.div`\n  border-radius: 0.5em;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  mergin-bottom: 1em;\n  color: white;\n  min-width: 20em;\n  margin-top: 1em;\n  background-color: ${props => props.color.substring(0,props.color.length - 3) + \",0.8)\"};\n`\n","import styled from 'styled-components'\n\nexport const H1 = styled.h1`\n\n`\nexport const H2 = styled.h2`\n\n`\nexport const H3 = styled.h3`\n\n`\n","import React from 'react';\nimport { Time, AnimatedTime } from './styles';\n\nconst TimeWrapper = ({animated, time}) => (\n  <div>\n    {animated ? <AnimatedTime>{time}</AnimatedTime> : <Time>{time}</Time>}\n  </div>\n\n);\n\nexport default TimeWrapper;\n","import React from 'react';\nimport moment from 'moment';\nimport { Stoptime, ColoredIcon, Header, StopTimesWrapper, Headsign, StopWrapper } from './styles';\nimport { H2 } from './typography';\nimport { FaTrain, FaBus, FaSubway, FaCat, FaShip } from 'react-icons/fa';\nimport TimeWrapper from './time';\n\nconst mapping = {\n  'FERRY': {\n    component: <FaShip />,\n  color: 'rgba(0,185,228,1)'\n},\n  'RAIL': {\n    component: <FaTrain />,\n  color: 'rgba(140,71,153,1)'\n},\n  'BUS': {\n    component: <FaBus />,\n  color: 'rgba(0,122,201,1)'\n},\n  'SUBWAY': {\n    component: <FaSubway />,\n  color: 'rgba(255,99,25,1)',\n},\n  'TRAM':  {\n    component: <FaCat />,\n  color: 'rgba(0,152,95,1)'\n  },\n}\n\nconst getTimeInMinutes = (stoptime) => {\n  return moment.unix(stoptime.serviceDay + stoptime.realtimeArrival).diff(moment(), 'minutes');\n}\n\nconst getFormattedTime = (stoptime) => {\n  return moment.unix(stoptime.serviceDay + stoptime.realtimeArrival).format('HH:mm')\n}\n\nconst Stop = ({stop}) => (\n  <StopWrapper color={mapping[stop.vehicleMode].color}>\n    <Header color={mapping[stop.vehicleMode].color}>\n      <H2>\n        <ColoredIcon\n          color=\"white\">\n           {mapping[stop.vehicleMode].component}\n        </ColoredIcon>\n        {stop.name}\n      </H2>\n    </Header>\n    <StopTimesWrapper>\n      {stop.stoptimesWithoutPatterns.map((stoptime, i) => (\n        <Stoptime key={i}>\n          <TimeWrapper\n            animated={stoptime.realtime}\n            time={getTimeInMinutes(stoptime) < 10 ? getTimeInMinutes(stoptime) + ' min' : getFormattedTime(stoptime) }\n            />\n          <Headsign>{stoptime.trip.routeShortName} {stoptime.headsign}</Headsign>\n        </Stoptime>\n      ))}\n    </StopTimesWrapper>\n  </StopWrapper>\n);\n\nexport default Stop;\n","import React from 'react';\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Stop from './stop';\nimport { ColumnDiv } from './styles'\n\nconst Stops = ({queryString}) => (\n  <Query\n    query={gql`\n      {\n        stops(name: \"${queryString}\") {\n          name\n          gtfsId\n          vehicleMode\n          stoptimesWithoutPatterns(omitNonPickups:true) {\n            realtimeArrival\n            realtimeDeparture\n            realtimeArrival\n            realtime\n            serviceDay\n            headsign\n            trip {\n              routeShortName\n            }\n          }\n        }\n      }\n    `}\n    pollInterval={15000}\n  >\n    {({ loading, error, data }) => {\n      if (loading) return <p>Loading...</p>;\n      if (error) return <p>Error :(</p>;\n      return (<ColumnDiv>{data.stops.map(stop => (<Stop key={stop.gtfsId} stop={stop} />))}</ColumnDiv>);\n    }}\n  </Query>\n);\n\nexport default Stops;\n","import React from 'react';\nimport { StyledInput } from './styles';\n\nconst Input = (props) => (\n  <StyledInput onChange={(e) => props.handleChange(e.target.value)}/>\n);\n\nexport default Input;\n","import React, { Component } from 'react';\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport Stops from './components/stops';\nimport Input from './components/input';\nimport { Wrapper } from './components/styles';\n\nconst client = new ApolloClient({\n  uri: \"https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql\"\n});\n\nclass App extends Component {\n  state = {\n    queryString: ''\n  }\n\n  handleInputChange = (changed) => {\n    if (changed.length > 2) {\n      this.setState({\n        queryString: changed\n      })\n    }\n  }\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Wrapper>\n          <Input handleChange={this.handleInputChange} />\n          <Stops queryString={this.state.queryString} />\n        </Wrapper>\n      </ApolloProvider>\n    )}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}