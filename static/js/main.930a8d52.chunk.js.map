{"version":3,"sources":["components/styles.js","components/typography.js","components/time.js","components/stop.js","components/queries.js","components/stops-by-name.js","components/stops-by-location.js","components/input.js","components/networking.js","components/address-search.js","components/swipe-menu.js","App.js","serviceWorker.js","index.js"],"names":["changeColor","keyframes","_templateObject","ColumnDiv","styled","div","_templateObject2","_templateObject3","StyledInput","input","_templateObject4","props","width","Header","_templateObject5","color","StopTimesWrapper","_templateObject6","Time","span","_templateObject7","AnimatedTime","_templateObject8","Headsign","_templateObject9","ColoredIcon","_templateObject10","Icon","_templateObject11","size","Wrapper","_templateObject12","Stoptime","_templateObject13","StopWrapper","_templateObject14","substring","length","List","posed","open","y","opacity","transition","duration","closed","ListContainer","_templateObject15","visible","Item","ListItem","_templateObject16","SearchContainer","_templateObject17","Text","p","_templateObject18","SwipeMenuContainer","_templateObject19","h1","typography_templateObject","H2","h2","typography_templateObject2","h3","typography_templateObject3","TimeWrapper","_ref","animated","time","react_default","a","createElement","mapping","FERRY","component","index_esm","RAIL","BUS","SUBWAY","TRAM","null","getTimeInMinutes","stoptime","moment","unix","serviceDay","realtimeArrival","diff","getFormattedTime","format","Stop","stop","distance","vehicleMode","name","concat","stoptimesWithoutPatterns","map","i","key","components_time","realtime","trip","routeShortName","headsign","stopFragment","gql","queries_templateObject3","StopsByName","query","queryString","queries_templateObject","stopsByName","react_apollo_esm","pollInterval","_ref2","loading","error","data","stops","components_stop","gtfsId","coordinates","queries_templateObject2","lat","lon","radius","stopsByLocation","stopsByRadius","edges","_ref3","node","Input","onChange","e","handleChange","target","value","placeholder","getJSON","url","fetch","then","response","json","catch","err","console","toString","AddressSearch","_useState","useState","_useState2","Object","slicedToArray","suggestions","setSuggestions","_useState3","_useState4","setQueryString","_useState5","_useState6","setRadius","_useState7","_useState8","search","setSearch","_useState9","_useState10","pose","setPose","useEffect","asyncToGenerator","regenerator_default","mark","_callee","res","wrap","_context","prev","next","sent","features","apply","this","arguments","handleAddressChange","handleKeyPress","onKeyPress","type","suggestion","properties","id","onClick","geometry","handleClick","label","SwipeMenu","handleInputChange","position","setPosition","onSwiped","Swipeable_default","onSwipedLeft","onSwipedRight","address_search","client","ApolloClient","uri","App","storedCoordinates","JSON","parse","localStorage","getItem","defaultCoordinates","setCoordinates","isLocation","setIsLocation","swipe_menu","newCoordinates","setItem","stringify","changed","stops_by_location","stops_by_name","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gtHAGA,IAAMA,EAAcC,YAAHC,KAmBJC,GALSC,IAAOC,IAAVC,KAKMF,IAAOC,IAAVE,MAQTC,EAAcJ,IAAOK,MAAVC,IAMX,SAAAC,GAAK,OAAIA,EAAMC,OAAS,QAIxB,SAAAD,GAAK,OAAIA,EAAMC,OAAS,SAMxBC,EAAST,IAAOC,IAAVS,IAMG,SAAAH,GAAK,OAAIA,EAAMI,QAGxBC,EAAmBZ,IAAOC,IAAVY,KAShBC,EAAOd,IAAOe,KAAVC,KAIJC,EAAejB,IAAOe,KAAVG,IAEVtB,GAEFuB,EAAWnB,IAAOe,KAAVK,KAIRC,EAAcrB,IAAOe,KAAVO,IACb,SAAAf,GAAK,OAAIA,EAAMI,QAIbY,EAAOvB,IAAOe,KAAVS,IACF,SAAAjB,GAAK,OAAIA,EAAMkB,MAAQ,QAGzBC,EAAU1B,IAAOC,IAAV0B,KAQPC,EAAW5B,IAAOC,IAAV4B,KASRC,EAAc9B,IAAOC,IAAV8B,IAQF,SAAAxB,GAAK,OAAIA,EAAMI,MAAMqB,UAAU,EAAEzB,EAAMI,MAAMsB,OAAS,GAAK,UAW3EC,EAAOC,IAAMlC,IAAI,CACrBmC,KAAM,CAAEC,EAAG,EAAGC,QAAS,EAAGC,WAAY,CAAEC,SAAU,MAClDC,OAAQ,CAAEJ,GAAI,IAAKC,QAAS,EAAGC,WAAY,CAAEC,SAAU,QAG5CE,EAAgB1C,YAAOkC,EAAPlC,CAAH2C,IACb,SAAApC,GAAK,OAAIA,EAAMqC,QAAU,OAAS,SAazCC,EAAOV,IAAMlC,MAEN6C,EAAW9C,YAAO6C,EAAP7C,CAAH+C,KAaRC,EAAkBhD,IAAOC,IAAVgD,KAMfC,EAAOlD,IAAOmD,EAAVC,KAIJC,EAAqBrD,IAAOC,IAAVqD,sOCnKbtD,IAAOuD,GAAVC,MAAR,IAGMC,GAAKzD,IAAO0D,GAAVC,UAGG3D,IAAO4D,GAAVC,aCEAC,GAPK,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,KAAZ,OAClBC,EAAAC,EAAAC,cAAA,WACGJ,EAAWE,EAAAC,EAAAC,cAACnD,EAAD,KAAegD,GAAuBC,EAAAC,EAAAC,cAACtD,EAAD,KAAOmD,KCEvDI,GAAU,CACdC,MAAS,CACPC,UAAWL,EAAAC,EAAAC,cAACI,GAAA,EAAD,MACb7D,MAAO,qBAEP8D,KAAQ,CACNF,UAAWL,EAAAC,EAAAC,cAACI,GAAA,EAAD,MACb7D,MAAO,sBAEP+D,IAAO,CACLH,UAAWL,EAAAC,EAAAC,cAACI,GAAA,EAAD,MACb7D,MAAO,qBAEPgE,OAAU,CACRJ,UAAWL,EAAAC,EAAAC,cAACI,GAAA,EAAD,MACb7D,MAAO,qBAEPiE,KAAS,CACPL,UAAWL,EAAAC,EAAAC,cAACI,GAAA,EAAD,MACb7D,MAAO,oBAEPkE,KAAM,CACJN,UAAWL,EAAAC,EAAAC,cAACI,GAAA,EAAD,MACb7D,MAAO,sBAIHmE,GAAmB,SAACC,GACxB,OAAOC,IAAOC,KAAKF,EAASG,WAAaH,EAASI,iBAAiBC,KAAKJ,MAAU,YAG9EK,GAAmB,SAACN,GACxB,OAAOC,IAAOC,KAAKF,EAASG,WAAaH,EAASI,iBAAiBG,OAAO,UA6B7DC,GA1BF,SAAAxB,GAAA,IAAEyB,EAAFzB,EAAEyB,KAAMC,EAAR1B,EAAQ0B,SAAR,OACXvB,EAAAC,EAAAC,cAACtC,EAAD,CAAanB,MAAO0D,GAAQmB,EAAKE,aAAa/E,OAC5CuD,EAAAC,EAAAC,cAAC3D,EAAD,CAAQE,MAAO0D,GAAQmB,EAAKE,aAAa/E,OACvCuD,EAAAC,EAAAC,cAACX,GAAD,KACES,EAAAC,EAAAC,cAAC/C,EAAD,CACEV,MAAM,SACJ0D,GAAQmB,EAAKE,aAAanB,WAE7BiB,EAAKG,KACLF,GAAQ,IAAAG,OAAQH,EAAR,QAGbvB,EAAAC,EAAAC,cAACxD,EAAD,KACG4E,EAAKK,yBAAyBC,IAAI,SAACf,EAAUgB,GAAX,OACjC7B,EAAAC,EAAAC,cAACxC,EAAD,CAAUoE,IAAKD,GACb7B,EAAAC,EAAAC,cAAC6B,GAAD,CACEjC,SAAUe,EAASmB,SACnBjC,KAAMa,GAAiBC,GAAY,GAAKD,GAAiBC,GAAY,OAASM,GAAiBN,KAEjGb,EAAAC,EAAAC,cAACjD,EAAD,KAAW4D,EAASoB,KAAKC,eAAzB,IAA0CrB,EAASsB,wzBC3DtD,IA6BDC,GAAeC,KAAHC,MCKHC,GA7BK,SAAA1C,GAAmB,IAC/B2C,EDNmB,SAAAC,GAAW,OAAIJ,KAAJK,KAEnBD,EAKfL,ICDYO,CADuB9C,EAAjB4C,aAEpB,OACAzC,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CACEJ,MAAOA,EACPK,aAAc,MAEb,SAAAC,GAA8B,IAA3BC,EAA2BD,EAA3BC,QAASC,EAAkBF,EAAlBE,MAAOC,EAAWH,EAAXG,KAClB,OAAIF,EAAgB/C,EAAAC,EAAAC,cAAClB,EAAD,mBAChBgE,EAAchD,EAAAC,EAAAC,cAAClB,EAAD,iBAEhBgB,EAAAC,EAAAC,cAACrE,EAAD,KACGoH,EAAKC,MAAMnF,OAAS,EACnBiC,EAAAC,EAAAC,cAAA,WACI+C,EAAKC,MAAMtB,IAAI,SAACN,GAAD,OAEbtB,EAAAC,EAAAC,cAACiD,GAAD,CAAMrB,IAAKR,EAAK8B,OAAQ9B,KAAMA,OAIpCtB,EAAAC,EAAAC,cAAClB,EAAD,gCCSGuD,GA7BK,SAAA1C,GAAmB,IAC/B2C,EFIuB,SAAAa,GAAW,OAAIhB,KAAJiB,KAElBD,EAAYE,IAAaF,EAAYG,IAC3DH,EAAYI,OAaVrB,IEpBYsB,CADuB7D,EAAjBwD,aAEpB,OACArD,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CACEJ,MAAOA,EACPK,aAAc,MAEb,SAAAC,GAA8B,IAA3BC,EAA2BD,EAA3BC,QAASC,EAAkBF,EAAlBE,MAAOC,EAAWH,EAAXG,KAClB,OAAIF,EAAgB/C,EAAAC,EAAAC,cAAClB,EAAD,mBAChBgE,EAAchD,EAAAC,EAAAC,cAAClB,EAAD,iBAEhBgB,EAAAC,EAAAC,cAACrE,EAAD,KACGoH,EAAKU,cAAcC,MAAM7F,OAAS,EACjCiC,EAAAC,EAAAC,cAAA,WACI+C,EAAKU,cAAcC,MAAMhC,IAAI,SAAAiC,GAAA,IAAEC,EAAFD,EAAEC,KAAF,OAE3B9D,EAAAC,EAAAC,cAACiD,GAAD,CAAMrB,IAAKgC,EAAKxC,KAAK8B,OAAQ9B,KAAMwC,EAAKxC,KAAMC,SAAUuC,EAAKvC,cAInEvB,EAAAC,EAAAC,cAAClB,EAAD,oDCjBG+E,GAPD,SAAC1H,GAAD,OACZ2D,EAAAC,EAAAC,cAACpB,EAAD,KACEkB,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAChE,EAAD,CAAa8H,SAAU,SAACC,GAAD,OAAO5H,EAAM6H,aAAaD,EAAEE,OAAOC,QAAQC,YAAY,qDCNrEC,GAAU,SAAAC,GACrB,OAAOC,MAAMD,GACVE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BC,MAAM,SAAAC,GACLC,QAAQ9B,MAAR,mBAAAtB,OAAiC6C,EAAjC,MAAA7C,OAAyCmD,EAAIE,gBCuFpCC,GAtFO,SAAAnF,GAAsB,IAAnBqE,EAAmBrE,EAAnBqE,aAAmBe,EACFC,mBAAS,IADPC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClCK,EADkCH,EAAA,GACrBI,EADqBJ,EAAA,GAAAK,EAEFN,mBAAS,IAFPO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAElC/C,EAFkCgD,EAAA,GAErBC,EAFqBD,EAAA,GAAAE,EAGZT,mBAAS,KAHGU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAGlClC,EAHkCmC,EAAA,GAG1BC,EAH0BD,EAAA,GAAAE,EAIZZ,mBAAS,IAJGa,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAIlCE,EAJkCD,EAAA,GAI1BE,EAJ0BF,EAAA,GAAAG,EAKhBhB,mBAAS,UALOiB,EAAAf,OAAAC,EAAA,EAAAD,CAAAc,EAAA,GAKlCE,EALkCD,EAAA,GAK5BE,EAL4BF,EAAA,GAS1CG,oBAAU,YACiB,eAAAxD,EAAAsC,OAAAmB,GAAA,EAAAnB,CAAAoB,GAAAvG,EAAAwG,KAAG,SAAAC,IAAA,IAAAnC,EAAAoC,EAAA,OAAAH,GAAAvG,EAAA2G,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,YACtBf,EAAOjI,OAAS,GADM,CAAA8I,EAAAE,KAAA,eAEpBxC,EAFoB,6DAAA7C,OAE+CsE,EAF/C,gDAAAa,EAAAE,KAAA,EAGRzC,GAAQC,GAHA,OAGpBoC,EAHoBE,EAAAG,KAK1BzB,EAAeoB,EAAIM,UACnBZ,EAAQ,QANkB,wBAAAQ,EAAAvF,SAAAoF,MAAH,yBAAA5D,EAAAoE,MAAAC,KAAAC,YAAA,EASzBC,IACC,CAACrB,IAIJ,IAAMsB,EAAiB,SAACrD,GACR,UAAVA,EAAEnC,MACJuE,EAAQ,UACRJ,EAAUxD,KAsBd,OACEzC,EAAAC,EAAAC,cAACpB,EAAD,KACIkB,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAChE,EAAD,CACEkI,MAAO3B,EACPuB,SAvBkB,SAAAC,GACxByB,EAAezB,EAAEE,OAAOC,OACpBH,EAAEE,OAAOC,MAAMrG,OAAS,GAC1BkI,EAAUhC,EAAEE,OAAOC,QAqBfC,YAAY,kBACZkD,WAAYD,IAEhBtH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAChE,EAAD,CACEmI,YAAY,MACZ/H,MAAM,MACNkL,KAAK,SACLpD,MAAOX,EACPO,SAAU,SAACC,GAAD,OAAO4B,EAAU5B,EAAEE,OAAOC,QACpCmD,WAAYD,IAEdtH,EAAAC,EAAAC,cAAA,kBAEAF,EAAAC,EAAAC,cAAC1B,EAAD,CAAeE,QAAS4G,EAAYvH,OAAS,EAAGqI,KAAMA,GAClDd,EAAY1D,IAAI,SAAA6F,GAAU,OACxBzH,EAAAC,EAAAC,cAACtB,EAAD,CACEkD,IAAK2F,EAAWC,WAAWC,GAC3BC,QAAS,kBApCH,SAAAH,GAClBvD,EAAa,CACXV,IAAKiE,EAAWI,SAASxE,YAAY,GACrCE,IAAKkE,EAAWI,SAASxE,YAAY,GACrCI,OAAQA,IAEV4C,EAAQ,UACRd,EAAe,IACfG,EAAe,IA4BYoC,CAAYL,KAC1BA,EAAWC,WAAWK,YC3CxBC,GA7BG,SAAAnI,GAAgD,IAA7CoI,EAA6CpI,EAA7CoI,kBAAmBZ,EAA0BxH,EAA1BwH,oBAA0BpC,EAChCC,mBAAS,GADuBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACzDiD,EADyD/C,EAAA,GAC/CgD,EAD+ChD,EAAA,GAG1DiD,EAAW,WAEfD,EADiC,IAAbD,EAAiB,EAAI,IAG3C,OACElI,EAAAC,EAAAC,cAACf,EAAD,KACEa,EAAAC,EAAAC,cAAC7C,EAAD,CAAME,KAAK,OACTyC,EAAAC,EAAAC,cAACI,GAAA,EAAD,CAAasH,QAASQ,KAExBpI,EAAAC,EAAAC,cAACmI,GAAApI,EAAD,CACEqI,aAAcF,EACdG,cAAeH,GAED,IAAbF,EACClI,EAAAC,EAAAC,cAAC/D,GAAD,CAAO+H,aAAc+D,IAErBjI,EAAAC,EAAAC,cAACsI,GAAD,CAAetE,aAAcmD,KAGjCrH,EAAAC,EAAAC,cAAC7C,EAAD,CAAME,KAAK,OACTyC,EAAAC,EAAAC,cAACI,GAAA,EAAD,CAAcsH,QAASQ,OCvBzBK,GAAS,IAAIC,IAAa,CAC9BC,IAAK,oEA8CQC,GA3CH,WACV,IAAMC,EAAoBC,KAAKC,MAAMC,aAAaC,QAAQ,gBAEpDC,EAAsB,CAC1B3F,IAAKsF,EAAoBA,EAAkBtF,IAAM,MACjDC,IAAKqF,EAAoBA,EAAkBrF,IAAM,OACjDC,OAAQoF,EAAoBA,EAAkBpF,OAAS,KANzCwB,EASwBC,mBAAS,IATjCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GASRxC,EATQ0C,EAAA,GASKO,EATLP,EAAA,GAAAK,EAUwBN,mBAASgE,GAVjCzD,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAURnC,EAVQoC,EAAA,GAUK0D,EAVL1D,EAAA,GAAAE,EAWsBT,oBAAS,GAX/BU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAWRyD,EAXQxD,EAAA,GAWIyD,EAXJzD,EAAA,GA+Bd,OACE5F,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAgB6F,OAAQA,IACtBzI,EAAAC,EAAAC,cAAC1C,EAAD,KACEwC,EAAAC,EAAAC,cAACoJ,GAAD,CAAWjC,oBAdS,SAAClL,GAC3B,IAAMoN,EAAiB,CACrBhG,IAAKpH,EAAMoH,IACXC,IAAKrH,EAAMqH,IACXC,OAAQtH,EAAMsH,QAEhB4F,GAAc,GACdF,EAAeI,GACfP,aAAaQ,QAAQ,cAAeV,KAAKW,UAAUF,KAMQtB,kBArBnC,SAACyB,GACrBA,EAAQ3L,OAAS,IACnB2H,EAAegE,GACfL,GAAc,OAmBTD,EACCpJ,EAAAC,EAAAC,cAACyJ,GAAD,CAAiBtG,YAAaA,IAC9BrD,EAAAC,EAAAC,cAAC0J,GAAD,CAAanH,YAAaA,OCrClBoH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECZNC,IAASC,OAAOnK,EAAAC,EAAAC,cAACkK,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhG,KAAK,SAAAiG,GACjCA,EAAaC","file":"static/js/main.930a8d52.chunk.js","sourcesContent":["import styled, {keyframes} from 'styled-components'\nimport posed from 'react-pose'\n\nconst changeColor = keyframes`\n  0% {\n    color: rgb(255,255,255);\n  }\n\n  50% {\n    color: rgb(240,146,205);\n  }\n\n  100% {\n    color: rgb(255,255,255);\n  }\n`\n\nexport const RowDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`\nexport const ColumnDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n\n`\n\nexport const StyledInput = styled.input`\n  border: 1px solid black;\n  padding: 1em;\n  border-radius: 0.5em;\n  margin: 0.5em;\n  @media (max-width: 480px) {\n    width: ${props => props.width || '15em'};\n  }\n\n  @media (min-width: 480px) {\n    width: ${props => props.width || '20em'};\n  }\n\n  width: 20em;\n`\n\nexport const Header = styled.div`\n  border-top-left-radius: 0.5em;\n  border-top-right-radius: 0.5em;\n  display: flex;\n  justify-content: flex-start;\n  padding-left: 1.5em;\n  background-color: ${props => props.color};\n`\n\nexport const StopTimesWrapper = styled.div`\n  border-radius: 0.5em;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 0.5em;\n  margin-bottom: 1em;\n  color: white;\n`\nexport const Time = styled.span`\n  margin-right: 1em;\n  width: 1em;\n`\nexport const AnimatedTime = styled.span`\n  margin-right: 1em;\n  animation: ${changeColor} 10s linear infinite;\n`\nexport const Headsign = styled.span`\n\n`\n\nexport const ColoredIcon = styled.span`\n  color: ${props => props.color};\n  padding-right: 0.5em;\n`\n\nexport const Icon = styled.span`\n  font-size: ${props => props.size || '1em'};\n`\n\nexport const Wrapper = styled.div`\n  width: 100%;\n  font-family: 'Roboto', sans-serif;\n  flex-direction: column;\n  display: flex;\n  align-items: center;\n`\n\nexport const Stoptime = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  margin-bottom: 0.25em;\n  margin-left: 0.5em;\n  margin-right: 0.5em;\n`\n\nexport const StopWrapper = styled.div`\n  border-radius: 0.5em;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  mergin-bottom: 1em;\n  color: white;\n  margin-top: 1em;\n  background-color: ${props => props.color.substring(0,props.color.length - 3) + \",0.8)\"};\n\n  @media (max-width: 480px) {\n    width: 17.5em;\n  }\n\n  @media (min-width: 480px) {\n    width: 22.5em;\n  }\n`\n\nconst List = posed.div({\n  open: { y: 0, opacity: 1, transition: { duration: 500 } },\n  closed: { y: -200, opacity: 0, transition: { duration: 1000 } }\n})\n\nexport const ListContainer = styled(List)`\n  display: ${props => props.visible ? 'flex' : 'none'};\n  flex-direction: column;\n  align-items: center;\n  border: 1px solid black;\n  border-radius: 0.5em;\n  @media (max-width: 480px) {\n    width: 18em;\n  }\n\n  @media (min-width: 480px) {\n    width: 25em;\n  }\n`\nconst Item = posed.div();\n\nexport const ListItem = styled(Item)`\n  display: flex;\n  flex-direction: column;\n  border-bottom: 1px solid black;\n  width: 100%;\n  padding-top: 1em;\n  padding-bottom: 1em;\n\n  :last-child {\n    border-bottom: none;\n  }\n`\n\nexport const SearchContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nexport const Text = styled.p`\n  padding: 1em;\n`\n\nexport const SwipeMenuContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n`\n","import styled from 'styled-components'\n\nexport const H1 = styled.h1`\n\n`\nexport const H2 = styled.h2`\n\n`\nexport const H3 = styled.h3`\n\n`\n","import React from 'react'\nimport { Time, AnimatedTime } from './styles'\n\nconst TimeWrapper = ({animated, time}) => (\n  <div>\n    {animated ? <AnimatedTime>{time}</AnimatedTime> : <Time>{time}</Time>}\n  </div>\n\n)\n\nexport default TimeWrapper\n","import React from 'react'\nimport moment from 'moment'\nimport { Stoptime, ColoredIcon, Header, StopTimesWrapper, Headsign, StopWrapper } from './styles'\nimport { H2 } from './typography'\nimport { FaTrain, FaBus, FaSubway, FaCat, FaShip } from 'react-icons/fa'\nimport TimeWrapper from './time'\n\nconst mapping = {\n  'FERRY': {\n    component: <FaShip />,\n  color: 'rgba(0,185,228,1)'\n},\n  'RAIL': {\n    component: <FaTrain />,\n  color: 'rgba(140,71,153,1)'\n},\n  'BUS': {\n    component: <FaBus />,\n  color: 'rgba(0,122,201,1)'\n},\n  'SUBWAY': {\n    component: <FaSubway />,\n  color: 'rgba(255,99,25,1)',\n},\n  'TRAM':  {\n    component: <FaCat />,\n  color: 'rgba(0,152,95,1)'\n  },\n  null: {\n    component: <FaShip />,\n  color: 'rgba(0,185,228,1)'\n},\n}\n\nconst getTimeInMinutes = (stoptime) => {\n  return moment.unix(stoptime.serviceDay + stoptime.realtimeArrival).diff(moment(), 'minutes')\n}\n\nconst getFormattedTime = (stoptime) => {\n  return moment.unix(stoptime.serviceDay + stoptime.realtimeArrival).format('HH:mm')\n}\n\nconst Stop = ({stop, distance}) => (\n  <StopWrapper color={mapping[stop.vehicleMode].color}>\n    <Header color={mapping[stop.vehicleMode].color}>\n      <H2>\n        <ColoredIcon\n          color=\"white\">\n           {mapping[stop.vehicleMode].component}\n        </ColoredIcon>\n        {stop.name}\n        {distance && ` ${distance} m`} \n      </H2>\n    </Header>\n    <StopTimesWrapper>\n      {stop.stoptimesWithoutPatterns.map((stoptime, i) => (\n        <Stoptime key={i}>\n          <TimeWrapper\n            animated={stoptime.realtime}\n            time={getTimeInMinutes(stoptime) < 10 ? getTimeInMinutes(stoptime) + ' min' : getFormattedTime(stoptime) }\n            />\n          <Headsign>{stoptime.trip.routeShortName} {stoptime.headsign}</Headsign>\n        </Stoptime>\n      ))}\n    </StopTimesWrapper>\n  </StopWrapper>\n)\n\nexport default Stop\n","import gql from \"graphql-tag\"\n\nexport const stopsByName = queryString => gql`\n  {\n    stops(name: \"${queryString}\") {\n      ...StopFragment\n    }\n  }\n\n  ${stopFragment}\n`\n\nexport const stopsByLocation = coordinates => gql`\n  {\n    stopsByRadius(lat:${coordinates.lat}, lon: ${coordinates.lon}, radius:${\n  coordinates.radius\n}) {\n      edges {\n        node {\n          stop {\n            ...StopFragment\n          }\n          distance\n        }\n      }\n    }\n  }\n\n  ${stopFragment}\n`\n\nconst stopFragment = gql`\n  fragment StopFragment on Stop {\n    name\n    gtfsId\n    vehicleMode\n    stoptimesWithoutPatterns(omitNonPickups: true) {\n      realtimeDeparture\n      realtimeArrival\n      realtime\n      serviceDay\n      headsign\n      trip {\n        routeShortName\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { Query } from \"react-apollo\"\nimport Stop from './stop'\nimport { ColumnDiv, Text } from './styles'\nimport { stopsByName } from './queries'\n\n\nconst StopsByName = ({queryString}) => {\n  const query = stopsByName(queryString)\n  return (\n  <Query\n    query={query}\n    pollInterval={15000}\n  >\n    {({ loading, error, data }) => {\n      if (loading) return <Text>Loading...</Text>\n      if (error) return <Text>Error :(</Text>\n      return (\n        <ColumnDiv>\n          {data.stops.length > 0 ?\n            <div>\n              { data.stops.map((stop) =>\n                (\n                  <Stop key={stop.gtfsId} stop={stop} />)\n                )\n              }\n            </div> :\n            <Text>\n              No results found :(\n            </Text>\n          }\n        </ColumnDiv>)\n    }}\n  </Query>\n)}\n\nexport default StopsByName\n","import React from 'react'\nimport { Query } from \"react-apollo\"\nimport Stop from './stop'\nimport { ColumnDiv, Text } from './styles'\nimport { stopsByLocation } from './queries'\n\n\nconst StopsByName = ({coordinates}) => {\n  const query = stopsByLocation(coordinates)\n  return (\n  <Query\n    query={query}\n    pollInterval={15000}\n  >\n    {({ loading, error, data }) => {\n      if (loading) return <Text>Loading...</Text>\n      if (error) return <Text>Error :(</Text>\n      return (\n        <ColumnDiv>\n          {data.stopsByRadius.edges.length > 0 ?\n            <div>\n              { data.stopsByRadius.edges.map(({node}) =>\n                (\n                  <Stop key={node.stop.gtfsId} stop={node.stop} distance={node.distance}/>)\n                )\n              }\n            </div> :\n            <Text>\n              No results found :(\n            </Text>\n          }\n        </ColumnDiv>)\n    }}\n  </Query>\n)}\n\nexport default StopsByName\n","import React from 'react'\nimport { StyledInput, SearchContainer } from './styles'\n\nconst Input = (props) => (\n  <SearchContainer>\n    <h5>Search for a stop</h5>\n    <StyledInput onChange={(e) => props.handleChange(e.target.value)} placeholder=\"Search for a stop\"/>\n  </SearchContainer>\n)\n\nexport default Input\n","export const getJSON = url => {\n  return fetch(url)\n    .then(response => response.json())\n    .catch(err => {\n      console.error(`Error fetching: ${url}: ${err.toString()}`)\n    })\n}\n","import React, { useState, useEffect } from 'react'\nimport { StyledInput } from './styles'\nimport { getJSON } from './networking'\nimport { ListContainer, ListItem, SearchContainer } from './styles'\n\nconst AddressSearch = ({ handleChange }) => {\n  const [ suggestions, setSuggestions ] = useState([])\n  const [ queryString, setQueryString ] = useState('')\n  const [ radius, setRadius ] = useState(500)\n  const [ search, setSearch ] = useState('')\n  const [ pose, setPose ] = useState('closed') \n\n  \n\n  useEffect(() => {\n    const handleAddressChange = async () => {\n      if (search.length > 2) {\n      const url = `https://api.digitransit.fi/geocoding/v1/autocomplete?text=${search}&focus.point.lat=60.17&focus.point.lon=24.93`\n      const res = await getJSON(url)\n\n      setSuggestions(res.features)\n      setPose('open')\n      }\n  }\n    handleAddressChange()\n  }, [search])\n\n\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      setPose('closed')\n      setSearch(queryString)\n    }\n  }\n\n  const handleInputChange = e => {\n    setQueryString(e.target.value)\n    if (e.target.value.length > 2) {\n      setSearch(e.target.value)\n    }\n  }\n\n  const handleClick = suggestion => {\n    handleChange({\n      lon: suggestion.geometry.coordinates[0],\n      lat: suggestion.geometry.coordinates[1],\n      radius: radius\n    })\n    setPose('closed')\n    setSuggestions([])\n    setQueryString('')\n  }\n\n  return (\n    <SearchContainer>\n        <h5>Search by address</h5>\n        <StyledInput\n          value={queryString}\n          onChange={handleInputChange}\n          placeholder=\"Type an address\"\n          onKeyPress={handleKeyPress}\n        />\n      <div>\n        <span>Change radius</span>\n        <StyledInput\n          placeholder=\"500\"\n          width=\"5em\"\n          type=\"number\"\n          value={radius}\n          onChange={(e) => setRadius(e.target.value)}\n          onKeyPress={handleKeyPress}\n          />\n        <span>m</span>\n      </div>\n        <ListContainer visible={suggestions.length > 0} pose={pose}>\n          { suggestions.map(suggestion => (\n              <ListItem\n                key={suggestion.properties.id}\n                onClick={() => handleClick(suggestion)}>\n                {suggestion.properties.label}\n              </ListItem>\n            )\n          )}\n        </ListContainer>\n      </SearchContainer>\n  )\n\n}\n\n\nexport default AddressSearch\n","import React, { useState } from \"react\"\nimport Swipeable from \"react-swipeable\"\nimport Input from \"./input\"\nimport AddressSearch from \"./address-search\"\nimport { SwipeMenuContainer, Icon } from \"./styles\"\nimport { FaAngleRight, FaAngleLeft } from \"react-icons/fa\"\n\n\nconst SwipeMenu = ({ handleInputChange, handleAddressChange }) => {\n  const [position, setPosition] = useState(1)\n\n  const onSwiped = () => {\n    const newPosition = position === 0 ? 1 : 0\n    setPosition(newPosition)\n  }\n  return (\n    <SwipeMenuContainer>\n      <Icon size=\"2em\">\n        <FaAngleLeft onClick={onSwiped} />\n      </Icon>\n      <Swipeable\n        onSwipedLeft={onSwiped}\n        onSwipedRight={onSwiped}\n      >\n        {position === 0 ? (\n          <Input handleChange={handleInputChange} />\n        ) : (\n          <AddressSearch handleChange={handleAddressChange} />\n        )}\n      </Swipeable>\n      <Icon size=\"2em\">\n        <FaAngleRight onClick={onSwiped} />\n      </Icon>\n    </SwipeMenuContainer>\n  )\n}\n\nexport default SwipeMenu\n","import React, { useState } from 'react'\nimport ApolloClient from \"apollo-boost\"\nimport { ApolloProvider } from \"react-apollo\"\nimport StopsByName from './components/stops-by-name'\nimport StopsByLocation from './components/stops-by-location'\nimport { Wrapper } from './components/styles'\nimport SwipeMenu from './components/swipe-menu'\n\nconst client = new ApolloClient({\n  uri: \"https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql\"\n})\n\nconst App = () => {\n  const storedCoordinates = JSON.parse(localStorage.getItem('coordinates'))\n\n  const defaultCoordinates =  {\n    lat: storedCoordinates ? storedCoordinates.lat : 60.170,\n    lon: storedCoordinates ? storedCoordinates.lon : 24.936,\n    radius: storedCoordinates ? storedCoordinates.radius : 500,\n  }\n\n  const [ queryString, setQueryString ] = useState('')\n  const [ coordinates, setCoordinates ] = useState(defaultCoordinates)\n  const [ isLocation, setIsLocation ] = useState(false)\n\n  const handleInputChange = (changed) => {\n    if (changed.length > 2) {\n      setQueryString(changed)\n      setIsLocation(false)\n    }\n  }\n\n  const handleAddressChange = (input) => {\n    const newCoordinates = {\n      lat: input.lat,\n      lon: input.lon,\n      radius: input.radius\n    }\n    setIsLocation(true)\n    setCoordinates(newCoordinates)\n    localStorage.setItem('coordinates', JSON.stringify(newCoordinates))\n  }\n  \n    return (\n      <ApolloProvider client={client}>\n        <Wrapper>\n          <SwipeMenu handleAddressChange={handleAddressChange} handleInputChange={handleInputChange} />\n          {isLocation ?\n            <StopsByLocation coordinates={coordinates} /> :\n            <StopsByName queryString={queryString} /> }\n        </Wrapper>\n      </ApolloProvider>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}